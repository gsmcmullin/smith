#!/usr/bin/env python3
# vim: tabstop=8 expandtab shiftwidth=4 softtabstop=4
import sys

from gi.repository import Gtk
from gi.repository import Gdk

from smithwidget import SmithWidget
import components
from transform import gamma_to_z
import spicenum

class SmithWindow(Gtk.Window):
    def __init__(self):
        Gtk.Window.__init__(self)
        self.set_title("Interactive Smith Chart")
        self.set_default_size(600, 600)
        self.smith = SmithWidget()
        self.add(self.smith)
        self.smith.grab_default()
        self.smith.grab_focus()

        self.smith.connect("key_press_event", self._smith_key_press_event)
        self.smith.connect("button_press_event", self._smith_click_event)

        self.cindex = 0
        self.smith.component = components.types[self.cindex]()
        self.smith.component.connect("notify::normval", self.component_value_changed)
        self.smith.solution.push_component(self.smith.component)

    def _smith_key_press_event(self, w, event):
        key = Gdk.keyval_name(event.keyval)
        if key == 'space':
            self.cindex = (self.cindex + 1) % len(components.types)
            if self.smith.component:
                self.smith.solution.pop_component()
                del self.smith.component
            self.smith.component = components.types[self.cindex]()
            self.smith.component.connect("notify::normval", self.component_value_changed)
            self.smith.solution.push_component(self.smith.component)
        elif key == 'Escape':
            if self.smith.component is None:
                return
            self.smith.solution.pop_component()
            del self.smith.component
            self.smith.component = None
            print("\x1b[K", end='')
            sys.stdout.flush()
        elif key == 'BackSpace':
            self.smith.solution.pop_component()
        else:
            print("Key event: ", key)

    def _smith_click_event(self, w, event):
        gamma = self.smith.xy_to_gamma(event.x, event.y)
        z = gamma_to_z(gamma)
        if self.smith.load is None or event.state & Gdk.ModifierType.SHIFT_MASK:
            self.smith.set_load(z)
            return
        if self.smith.load is not None and self.smith.component is not None:
            self.smith.component = components.types[self.cindex]()
            self.smith.component.connect("notify::normval", self.component_value_changed)
            self.smith.solution.push_component(self.smith.component)
            print()

    def component_value_changed(self, component, paramstring):
        print("\x1b[K%s: %s\r" % (component.format_type(),
                                component.format_physval(50, 2.4e9)), end='')
        sys.stdout.flush();

def main():
    w = SmithWindow()
    w.connect("destroy", Gtk.main_quit)
    w.show_all()
    Gtk.main()

if __name__ == "__main__":
    main()

